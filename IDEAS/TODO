


We need a way of making our data more anisitropic.

1:

first of all, we want a method that looks at all hard-negative candidates.
When we do this, we will want to compute square matrices of the embeddings.
after we do the filtering.

To do this, we will keep the distances of each embedding with each other, and store them during the embeddings computations.

2: I wish to test cagra's ability to index on the cloud, and test its retrieval ability. we should do this on a cheap pc.

3: Work alot on scoring systems, figure out what is best.


COMPUTE DISTANCE MATRICES!!!!!!!  Important.

We will keep the distance matrices of the embeddings.


================================================================

Once we have created our model, I wish to search using 20nn for each work, and create a dataset of
each work that is not being found on the encodings we have.

For each work object we do not find in our search through our whole index, we will take create a triplet from the 20nn
by searching for that specific work and creating a triplet from that work + two augmentations of it.

================================================================

We can go through our model, and for each work that isn't found on the 20 nn search, we will
actually just add them to a separate dataset, make triplets from them using knn-search,
and then fine-tune another encoder on those triplets, so we search via two encoders.




----------------------------------------------------------------

We have to do the following:

We have to figure out the perfect scoring system for total_score calculation.

What we are going to do is the following:

We will first construct models that have title + author + field + subfield

Then, we will have models that have title + author + field + subfield + topic + keywords

We want to make the full triplets parquet file and dataset, and then we want to make some others, such as these:

We want:

-----------------------------------------------------------------

We want the following:

We want in our works collection:

key_phrases
key_names

key_names will contain a list of all the first and last names of authors for the work, which are not initials.
key_phrases will contain a list of all the key phrases found in the abstract or title.

These will be used for meta-data filtering.

-----------------------------------------------------------------

Now, we will make a main triplets parquet file:

we expect the triplets file to be 5gb per 10 million triplets, and so around 50gb loaded up as a polars dataframe.

This means, at most we want around 300 million triplets. This will be difficult to manage and we will have to do a lot
of calculations to manage it, and keep memory down.

We want fine-tuning datasets as well:

One for authors + field + subfield
One for titles + field + subfield

One for curriculum learning, i.e the ones with high total scores. This needs to be very balanced.

One for each domain as well.









